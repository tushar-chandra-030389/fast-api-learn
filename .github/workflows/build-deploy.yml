name: Build and deploy rest server

on:
  push:
    branches:
      - "main"
      # mention other branches if any

  pull_request:
    branches:
      - "main"

# on: [ "push", "pull_request" ]

jobs:
  test-and-build-image:
    runs-on: ubuntu-20.04

    environment: TEST
    
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}} 
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_NAME_TEST: ${{secrets.DATABASE_NAME_TEST}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}} 
      TOKEN_EXPIRE_MINUTES: ${{secrets.TOKEN_EXPIRE_MINUTES}}
      ENV: ${{secrets.ENV}}
    
    services:
      # label for service
      rest_server_test_db:
        image: postgres
        env:
          POSTGRES_USER:  ${{env.DATABASE_USERNAME}}
          POSTGRES_DB: ${{env.DATABASE_NAME_TEST}}
          POSTGRES_PASSWORD: ${{env.DATABASE_PASSWORD}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps: 
      - name: Step 1 - pulling git repo
        uses: actions/checkout@v4
      - name: Step 1.1 - Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Step 2 - setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 
      - name: Step 3 - update pip
        run: python3 -m pip install --upgrade pip
      - name: Step 4 - install dependencies
        run: pip install -r requirements.txt
      # - name: Step 4.5 - Wait
      #   uses: 1itachi/sleep-random@v1.0.0
      #   with:
      #     minutes: '1'
      - name: Step 5 - run unit tests
        id: docker_build
        run: |
          pip install pytest
          pytest -v -s --disable-warnings 
      -
        name: Step 6 - Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/rest-server:latest
      - name: Step 7 - Output
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy-on-ec2:
    needs: test-and-build-image
    runs-on: ubuntu-20.04
    environment: TEST
    env:
      PRIVATE_KEY: ${{ secrets.TEST_EC2_SSH_PRIVATE_KEY }}
      HOSTNAME: ${{secrets.TEST_EC2_SSH_HOST}}
      USER_NAME: ${{secrets.TEST_EC2_USER_NAME}}
    steps:
      - name: Step 1 - pulling git repo
        uses: actions/checkout@v4
      - name: Step 2 - Save private key on runner
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
      # configure github ssh on EC2
      # name id_ed25519.pub
      # and move to authorized keys
      # better solution is using AWS cli with IAM
      - name: Step 3 - SSH to the EC2 and deploy
        run: |
            ssh -o StrictHostKeyChecking=no -i private_key.pem  ${USER_NAME}@${HOSTNAME} '
              echo "Now we have got the access of EC2 and we will start the deploy ."
              cd /home/ubuntu/rest-server/src
              git fetch
              git reset --hard origin/main
              sudo systemctl restart rest-server
            '
